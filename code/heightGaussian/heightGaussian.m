%% Height Gaussian
% intutions from inferring a Gaussian of males' heights

clear; close all;
preLoad = true;
printFigures = true;

%% Data
% gender, height, weight, BMI from Kaggle
% https://www.kaggle.com/yersever/500-person-gender-height-weight-bodymassindex/version/2#

dataName = 'genderHeightWeightBMI';
load ../data/genderHeightWeightBMI d
y = d.height(d.gender == 1);
y = y(1:10);
nPeople = length(y);

%% Constants
load pantoneColors pantone;

%% MCMC sampling from graphical model

% which engine to use
engine = 'jags';
%engine = 'stan';

% graphical model script
modelName = 'heightGaussian_1';

% parameters to monitor
params = {'mu', 'sigma', 'yRep'};

% MCMC properties
nChains    = 8;     % number of MCMC chains
nBurnin    = 1e3;   % number of discarded burn-in samples
nSamples   = 1e4;   % number of collected samples
nThin      = 1;     % number of samples between those collected
doParallel = 1;     % whether MATLAB parallel toolbox parallizes chains

% assign MATLAB variables to the observed nodes
data = struct('y', y, 'nPeople', nPeople);

% generator for initialization
generator = @()struct('sigma', rand*10 + 10);

%% Sample using Trinity
fileName = sprintf('%s_%s_%s.mat', modelName, dataName, engine);

if preLoad && isfile(sprintf('storage/%s', fileName))
    fprintf('Loading pre-stored samples for model %s on data %s\n', modelName, dataName);
    load(sprintf('storage/%s', fileName), 'chains', 'stats', 'diagnostics', 'info');
else
    tic; % start clock
    [stats, chains, diagnostics, info] = callbayes(engine, ...
        'model'           , sprintf('%s_%s.txt', modelName, engine)   , ...
        'data'            , data                                      , ...
        'outputname'      , 'samples'                                 , ...
        'init'            , generator                                 , ...
        'datafilename'    , modelName                                 , ...
        'initfilename'    , modelName                                 , ...
        'scriptfilename'  , modelName                                 , ...
        'logfilename'     , sprintf('tmp/%s', modelName)              , ...
        'nchains'         , nChains                                   , ...
        'nburnin'         , nBurnin                                   , ...
        'nsamples'        , nSamples                                  , ...
        'monitorparams'   , params                                    , ...
        'thin'            , nThin                                     , ...
        'workingdir'      , sprintf('tmp/%s', modelName)              , ...
        'verbosity'       , 0                                         , ...
        'saveoutput'      , true                                      , ...
        'parallel'        , doParallel                                );
    fprintf('%s took %f seconds!\n', upper(engine), toc); % show timing
    fprintf('Saving samples for model %s on data %s\n', modelName, dataName);
    if ~isfolder('storage')
        !mkdir storage
    end
    save(sprintf('storage/%s', fileName), 'chains', 'stats', 'diagnostics', 'info');
    
    % convergence of each parameter
    disp('Convergence statistics:')
    grtable(chains, 1.05)
    
    % basic descriptive statistics
    disp('Descriptive statistics for all chains:')
    codatable(chains);
    
end

%% Analysis

% constants
rng(1); % set random set for reproducible shuffle
fontSize = 20;
fontSizeInset = 14;
nSamples = 2e3;
xLim = [120 220];
xTick = 120:20:220;
yLim = [0 50];
yTick = 0:10:50;
xLimInset = [0 300];
x = xLimInset(1):0.05:xLimInset(2);
annotate{1} = {[170 15], [220 20], 8};
annotate{2} = {[170 9], [220 5], 12};
annotate{3} = {[200 30], [220 35], 4};
binWidth = 1;

% joint posterior of mu, sigma
F = figure; clf; hold on;
set(F, ...
    'color'             , 'w'               , ...
    'units'             , 'normalized'      , ...
    'position'          , [0.2 0.2 0.6 0.6] , ...
    'papersize'         , [11 6.75]         , ...
    'paperpositionmode' , 'auto'            );

% axis
subplot(3, 4, [1 2 3 5 6 7 9 10 11]); hold on;
set(gca, ...
    'xlim'       , xLim        , ...
    'xtick'      , xTick       , ...
    'ylim'       , yLim        , ...
    'ytick'      , yTick       , ...
    'box'        , 'off'       , ...
    'tickdir'    , 'out'       , ...
    'layer'      , 'top'       , ...
    'ticklength' , [0.01 0]    , ...
    'layer'      , 'top'       , ...
    'fontsize'   , fontSize    );
set(gca, 'position', get(gca, 'position') + [0 0.05 0 0]);

% labels
xlabel('Mean', 'fontsize', fontSize+4);
ylabel('Standard Deviation', 'fontsize', fontSize+4);

% draw posterior densities
muAll = chains.mu(:);
sigmaAll = chains.sigma(:);
shuffle = randperm(length(muAll));
muAll = muAll(shuffle);
sigmaAll = sigmaAll(shuffle);
muAll = muAll(1:nSamples);
sigmaAll = sigmaAll(1:nSamples);
plot(muAll, sigmaAll, 'o', ...
    'markerfacecolor' , pantone.DuskBlue    , ...
    'markeredgecolor' , 'w'                 , ...
    'markersize'      , 6                   );

% tidy
Raxes(gca, 0.02, 0.01);

% annotate arrows from samples
for idx = 1:numel(annotate)
    % closest sample
    [~, ind] = min(abs(muAll - annotate{idx}{1}(1)) + abs(sigmaAll - annotate{idx}{1}(2)));
    mu = muAll(ind); sigma = sigmaAll(ind);
    % plot line
    plot([mu annotate{idx}{2}(1)], [sigma annotate{idx}{2}(2)], '-', ...
        'color'     , 'k' , ...
        'linewidth' , 2   );
    plot(annotate{idx}{2}(1), annotate{idx}{2}(2), '>', ...
        'markerfacecolor' , 'k' , ...
        'markeredgecolor' , 'k' );
end

% annotate subplot
for idx = 1:numel(annotate)
subplot(3, 4, annotate{idx}{3}); hold on;
set(gca, ...
    'xlim'       , xLimInset          , ...
    'xtick'      , xLimInset([1 end]) , ...
    'ycolor'     , 'none'             , ...
    'box'        , 'off'              , ...
    'tickdir'    , 'out'              , ...
    'layer'      , 'top'              , ...
    'ticklength' , [0.01 0]           , ...
    'layer'      , 'top'              , ...
    'fontsize'   , fontSizeInset      );
set(gca, 'position', get(gca, 'position') + [0.01 0 0 0]);

% data
plot(y, 0, 'x', ...
    'color'      , pantone.ClassicBlue , ...
    'markersize' , 8                   , ...
    'linewidth'  , 2                   );

    % closest sample
    [~, ind] = min(abs(muAll - annotate{idx}{1}(1)) + abs(sigmaAll - annotate{idx}{1}(2)));
    mu = muAll(ind); sigma = sigmaAll(ind);

    % gaussian
    plot(x, 1/sqrt(2*3.14*sigma^2)*exp(-(mu - x).^2/(2*sigma^2)), 'k-');

end

% print
if printFigures
    if ~isfolder('figures')
        !mkdir figures
    end
    warning off;
    print(sprintf('figures/%s_%s_jointPosterior.png', modelName, dataName), '-dpng');
    print(sprintf('figures/%s_%s_jointPosterior.pdf', modelName, dataName), '-dpdf');
    warning on;
end

% posterior representative
F = figure; clf; hold on;
set(F, ...
    'color'             , 'w'               , ...
    'units'             , 'normalized'      , ...
    'position'          , [0.2 0.2 0.6 0.6] , ...
    'papersize'         , [11 6.75]         , ...
    'paperpositionmode' , 'auto'            );

% axis
set(gca, ...
    'units'      , 'normalized'                   , ...
    'position'   , [0.125 0.175 0.8 0.8]          , ...
    'xlim'       , xLimInset                      , ...
    'xtick'      , xLimInset(1):20:xLimInset(end) , ...
    'ycolor'     , 'none'                         , ...
    'box'        , 'off'                          , ...
    'tickdir'    , 'out'                          , ...
    'layer'      , 'top'                          , ...
    'ticklength' , [0.01 0]                       , ...
    'layer'      , 'top'                          , ...
    'fontsize'   , fontSize                       );

% labels
xlabel('Height', 'fontsize', fontSize+4);

% draw posterior densities
densityMu = histcounts(chains.mu(:), ...
    'binlimits'     , xLimInset([1 end]) , ...
    'binwidth'      , binWidth           , ...
    'normalization' , 'pdf'              );
patch([xLimInset(1)-binWidth/2:binWidth:xLimInset(end)-binWidth/2 xLimInset(1)], [0 densityMu 0], 'k', ...
    'facecolor' , pantone.ClassicBlue , ...
    'edgecolor' , 'w'                 , ...
    'facealpha' , 0.8                 );
densityHeightRep = histcounts(chains.yRep(:), ...
    'binlimits'     , xLimInset([1 end])    , ...
    'binwidth'      , binWidth              , ...
    'normalization' , 'pdf'                 );
patch([xLimInset(1)-binWidth/2:binWidth:xLimInset(end)-binWidth/2 xLimInset(1)], [0 densityHeightRep 0], 'k', ...
    'facecolor' , pantone.Custard   , ...
    'edgecolor' , 'w'               , ...
    'facealpha' , 0.8               );

% legend
legend('$\mu$', '$y^{rep}$', ...
    'fontsize'    , fontSize      , ...
    'interpreter' , 'latex'       , ...
    'location'    , 'northwest'   , ...
    'box'         , 'off'         );

% tidy
set(gca, 'ylim', [0 max(max(densityMu), max(densityHeightRep))]);
Raxes(gca, 0.02, 0);

% print
if printFigures
    if ~isfolder('figures')
        !mkdir figures
    end
    warning off;
    print(sprintf('figures/%s_%s_posterior.png', modelName, dataName), '-dpng');
    print(sprintf('figures/%s_%s_posterior.pdf', modelName, dataName), '-dpdf');
    warning on;
end

